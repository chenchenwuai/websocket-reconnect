{"version":3,"file":"websocket-reconnect.umd.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nexport class Event {\n\tpublic target: any;\n\tpublic type: string;\n\tconstructor (type: string, target: any) {\n\t\tthis.target = target\n\t\tthis.type = type\n\t}\n}\nexport class ErrorEvent extends Event {\n\tpublic message: string;\n\tpublic error: Error;\n\tconstructor (error: Error, target: any) {\n\t\tsuper('error', target)\n\t\tthis.message = error.message\n\t\tthis.error = error\n\t}\n}\nexport class CloseEvent extends Event {\n\tpublic code: number;\n\tpublic reason: string;\n\tpublic wasClean = true;\n\tconstructor (code = 1000, reason = '', target: any) {\n\t\tsuper('close', target)\n\t\tthis.code = code\n\t\tthis.reason = reason\n\t}\n}\nexport type ReconnectEventParams = {\n\tmaxRetries: number,\n\tretryCount: number\n}\nexport interface WebSocketEventMap {\n\tclose: CloseEvent;\n\terror: ErrorEvent;\n\tmessage: MessageEvent;\n\topen: Event;\n\treconnect: ReconnectEventParams;\n}\nexport interface WebSocketEventListenerMap {\n\tclose: (event: CloseEvent) => void | {handleEvent: (event: CloseEvent) => void};\n\terror: (event: ErrorEvent) => void | {handleEvent: (event: ErrorEvent) => void};\n\tmessage: (event: MessageEvent) => void | {handleEvent: (event: MessageEvent) => void};\n\topen: (event: Event) => void | {handleEvent: (event: Event) => void};\n\treconnect: (options: ReconnectEventParams) => void;\n}\nexport type ListenersMap = {\n\terror: Array<WebSocketEventListenerMap['error']>;\n\tmessage: Array<WebSocketEventListenerMap['message']>;\n\topen: Array<WebSocketEventListenerMap['open']>;\n\tclose: Array<WebSocketEventListenerMap['close']>;\n\treconnect: Array<WebSocketEventListenerMap['reconnect']>;\n}\nexport type Message = string | ArrayBufferLike | Blob | ArrayBufferView\nexport type Options = {\n\tWebSocket?: any\n\tmaxReconnectionDelay?: number\n\tminReconnectionDelay?: number\n\treconnectionDelayGrowFactor?: number\n\tminUptime?: number\n\tconnectionTimeout?: number\n\tmaxRetries?: number\n\tmaxEnqueuedMessages?: number\n\tstartClosed?: boolean\n\tenableHeartbeat?: boolean,\n\tpingTimeout?: number,\n\tpongTimeout?: number,\n\tpingMsg?: Message,\n\tdebug?: boolean\n}\nexport type UrlProvider = string | (() => string) | (() => Promise<string>)\n\nconst getGlobalWebSocket = (): WebSocket | undefined => {\n\tif (typeof WebSocket !== 'undefined') {\n\t\t// @ts-ignore\n\t\treturn WebSocket\n\t}\n}\n\nconst isWebSocket = (w: any) => typeof w !== 'undefined' && !!w && w.CLOSING === 2\n\nexport default class WebsocketReconnect {\n\tprivate _ws?: WebSocket\n\tprivate _binaryType: BinaryType = 'blob'\n\tprivate _messageQueue: Message[] = []\n\tprivate _listeners: ListenersMap = {\n\t\terror: [],\n\t\tmessage: [],\n\t\topen: [],\n\t\tclose: [],\n\t\treconnect: []\n\t}\n\n\tprivate _retryCount = -1\n\tprivate _uptimeTimeout: any\n\tprivate _connectTimeout: any\n\tprivate _shouldReconnect = true\n\tprivate _connectLock = false\n\tprivate _closeCalled = false\n\tprivate _pingIntervalId: any = 0\n\tprivate _pongTimeoutId: any = 0\n\n\tprivate readonly _url: UrlProvider\n\tprivate readonly _protocols: string | string[]\n\tprotected readonly _options: Required<Options>\n\n\tconstructor (url: UrlProvider, protocols?: string | string[], options: Options = {}) {\n\t\tthis._url = url\n\t\tthis._protocols = protocols ?? ''\n\t\tthis._options = {\n\t\t\tWebSocket: getGlobalWebSocket(),\n\t\t\tmaxReconnectionDelay: 10000,\n\t\t\tminReconnectionDelay: 1000 + Math.random() * 4000,\n\t\t\tminUptime: 5000,\n\t\t\treconnectionDelayGrowFactor: 1.3,\n\t\t\tconnectionTimeout: 4000,\n\t\t\tmaxRetries: Infinity,\n\t\t\tmaxEnqueuedMessages: Infinity,\n\t\t\tstartClosed: false,\n\t\t\tenableHeartbeat: false,\n\t\t\tpingTimeout: 10000,\n\t\t\tpongTimeout: 10000,\n\t\t\tpingMsg: '\\r\\n',\n\t\t\tdebug: false,\n\t\t\t...options\n\t\t}\n\t\tif (this._options.startClosed) {\n\t\t\tthis._shouldReconnect = false\n\t\t}\n\t\tthis._connect()\n\t}\n\t/**\n\t * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n\t *\n\t * Can be set, to change how binary data is returned. The default is \"blob\".\n\t */\n\tget binaryType (): BinaryType {\n\t\treturn this._ws ? this._ws.binaryType : this._binaryType\n\t}\n\tset binaryType (value: BinaryType) {\n\t\tthis._binaryType = value\n\t\tif (this._ws) {\n\t\t\tthis._ws.binaryType = value\n\t\t}\n\t}\n\t/**\n\t * Returns a websocket Message Array.\n\t *\n\t * Can be set.\n\t */\n\tget messageQueue (): Message[] {\n\t\treturn this._messageQueue\n\t}\n\tset messageQueue (value: Message[]) {\n\t\tthis._messageQueue = value\n\t}\n\n\t/**\n\t * Returns the number or connection retries\n\t */\n\tget retryCount (): number {\n\t\treturn Math.max(this._retryCount, 0)\n\t}\n\t/**\n\t * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n\t *\n\t * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n\t */\n\tget bufferedAmount (): number {\n\t\tconst bytes = this._messageQueue.reduce((acc, message) => {\n\t\t\tif (typeof message === 'string') {\n\t\t\t\tacc += message.length\n\t\t\t} else if (message instanceof Blob) {\n\t\t\t\tacc += message.size\n\t\t\t} else {\n\t\t\t\tacc += message.byteLength\n\t\t\t}\n\t\t\treturn acc\n\t\t}, 0)\n\t\treturn bytes + (this._ws ? this._ws.bufferedAmount : 0)\n\t}\n\t/**\n\t * Returns the extensions selected by the server, if any.\n\t */\n\tget extensions (): string {\n\t\treturn this._ws ? this._ws.extensions : ''\n\t}\n\t/**\n\t * Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.\n\t */\n\tget protocol (): string {\n\t\treturn this._ws ? this._ws.protocol : ''\n\t}\n\t/**\n\t * Returns the state of the WebSocket object's connection. It can have the values described below.\n\t */\n\tget readyState (): number {\n\t\tif (this._ws) {\n\t\t\treturn this._ws.readyState\n\t\t}\n\t\treturn this._options.startClosed ? WebSocket.CLOSED : WebSocket.CLOSING\n\t}\n\t/**\n\t * Returns the URL that was used to establish the WebSocket connection.\n\t */\n\tget url (): string {\n\t\treturn this._ws ? this._ws.url : ''\n\t}\n\n\tstatic get CONNECTING (): number {\n\t\treturn 0\n\t}\n\tstatic get OPEN (): number {\n\t\treturn 1\n\t}\n\tstatic get CLOSING (): number {\n\t\treturn 2\n\t}\n\tstatic get CLOSED (): number {\n\t\treturn 3\n\t}\n\n\tget CONNECTING (): number {\n\t\treturn WebSocket.CONNECTING\n\t}\n\tget OPEN (): number {\n\t\treturn WebSocket.OPEN\n\t}\n\tget CLOSING (): number {\n\t\treturn WebSocket.CLOSING\n\t}\n\tget CLOSED (): number {\n\t\treturn WebSocket.CLOSED\n\t}\n\n\t/**\n\t * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\n\t */\n\tpublic onclose: ((event: CloseEvent) => any) | null = null\n\t/**\n\t * An event listener to be called when an error occurs\n\t */\n\tpublic onerror: ((event: ErrorEvent) => any)|null = null\n\t/**\n\t * An event listener to be called when a message is received from the server\n\t */\n\tpublic onmessage: ((message: MessageEvent) => void) | null = null\n\t/**\n\t * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n\t * this indicates that the connection is ready to send and receive data\n\t */\n\tpublic onopen: ((event: Event) => void) | null = null\n\t/**\n\t * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n\t * this indicates that the connection is ready to send and receive data\n\t */\n\tpublic onreconnect: ((options: ReconnectEventParams) => void) | null = null\n\n\t/**\n\t * Closes the WebSocket connection or connection attempt, if any. If the connection is already\n\t * CLOSED, this method does nothing\n\t */\n\tpublic close (code?: number, reason?: string): void {\n\t\tthis._closeCalled = true\n\t\tthis._shouldReconnect = false\n\t\tthis._clearTimeouts()\n\t\tif (!this._ws) {\n\t\t\tthis._debug('close enqueued: no ws instance')\n\t\t\treturn\n\t\t}\n\t\tif (this._ws.readyState === this.CLOSED) {\n\t\t\tthis._debug('close: already closed')\n\t\t\treturn\n\t\t}\n\t\tthis._ws.close(code, reason)\n\t}\n\t/**\n\t * Enqueue specified data to be transmitted to the server over the WebSocket connection\n\t */\n\tpublic send (data: Message): void {\n\t\tif (this._ws && this._ws.readyState === this.OPEN) {\n\t\t\tthis._debug('send', data)\n\t\t\tthis._ws.send(data)\n\t\t} else {\n\t\t\tconst { maxEnqueuedMessages } = this._options\n\t\t\tif (this._messageQueue.length < maxEnqueuedMessages) {\n\t\t\t\tthis._debug('enqueue', data)\n\t\t\t\tthis._messageQueue.push(data)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register an event handler of a specific event type\n\t */\n\tpublic addEventListener<T extends keyof WebSocketEventListenerMap> (\n\t\ttype: T,\n\t\tlistener: WebSocketEventListenerMap[T]\n\t): void {\n\t\tif (this._listeners[type]) {\n\t\t\t// @ts-ignore\n\t\t\tthis._listeners[type].push(listener)\n\t\t}\n\t}\n\t/**\n\t * Removes an event listener\n\t */\n\tpublic removeEventListener<T extends keyof WebSocketEventListenerMap> (\n\t\ttype: T,\n\t\tlistener: WebSocketEventListenerMap\n\t): void {\n\t\tif (this._listeners[type]) {\n\t\t\t// @ts-ignore\n\t\t\tthis._listeners = this._listeners[type].filter(l => l !== listener)\n\t\t}\n\t}\n\n\t/**\n\t * dispatch event\n\t * @param event Event\n\t */\n\tpublic dispatchEvent (event: Event): boolean {\n\t\tconst listeners = this._listeners[event.type as keyof WebSocketEventListenerMap]\n\t\tif (listeners) {\n\t\t\tfor (const listener of listeners) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis._callEventListener(event, listener)\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tprivate _callEventListener<T extends keyof WebSocketEventListenerMap> (\n\t\tevent: WebSocketEventMap[T],\n\t\tlistener: WebSocketEventListenerMap[T]\n\t): void {\n\t\tif ('handleEvent' in listener) {\n\t\t\t// @ts-ignore\n\t\t\tlistener.handleEvent(event)\n\t\t} else {\n\t\t\t// @ts-ignore\n\t\t\tlistener(event)\n\t\t}\n\t}\n\n\t/**\n\t * Closes the WebSocket connection or connection attempt and connects again.\n\t * Resets retry counter;\n\t */\n\tpublic reconnect (code?: number, reason?: string): void {\n\t\tthis._shouldReconnect = true\n\t\tthis._closeCalled = false\n\t\tthis._retryCount = -1\n\t\tif (!this._ws || this._ws.readyState === WebSocket.CLOSED) {\n\t\t\tthis._connect()\n\t\t\tthis._handleReconnect()\n\t\t} else {\n\t\t\tthis._disconnect(code, reason)\n\t\t\tthis._connect()\n\t\t\tthis._handleReconnect()\n\t\t}\n\t}\n\n\tprivate _connect () {\n\t\tif (this._connectLock || !this._shouldReconnect) {\n\t\t\treturn\n\t\t}\n\t\tthis._connectLock = true\n\n\t\tconst {\n\t\t\tmaxRetries,\n\t\t\tconnectionTimeout,\n\t\t\tWebSocket\n\t\t} = this._options\n\n\t\tif (this._retryCount >= maxRetries) {\n\t\t\tthis._debug('max retries reached', this._retryCount, '>=', maxRetries)\n\t\t\treturn\n\t\t}\n\n\t\tthis._retryCount++\n\n\t\tthis._debug('connect times', this._retryCount)\n\t\tthis._removeListeners()\n\n\t\tif (!isWebSocket(WebSocket)) {\n\t\t\tthrow Error('No valid WebSocket class provided')\n\t\t}\n\n\t\tthis._wait()\n\t\t\t.then(() => this._getNextUrl(this._url))\n\t\t\t.then(url => {\n\t\t\t\tif (this._closeCalled) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._debug('connect', { url, protocols: this._protocols })\n\t\t\t\tthis._ws = this._protocols ? new WebSocket(url, this._protocols) : new WebSocket(url)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\tthis._ws!.binaryType = this._binaryType\n\t\t\t\tthis._connectLock = false\n\t\t\t\tthis._addEventListeners()\n\n\t\t\t\tthis._connectTimeout = setTimeout(() => this._handleTimeout(), connectionTimeout)\n\t\t\t})\n\t}\n\n\tprivate _disconnect (code = 1000, reason?: string) {\n\t\tthis._clearTimeouts()\n\t\tif (!this._ws) {\n\t\t\treturn\n\t\t}\n\t\tthis._removeListeners()\n\t\ttry {\n\t\t\tthis._ws.close(code, reason)\n\t\t\tthis._handleClose(new CloseEvent(code, reason, this))\n\t\t} catch (error) {\n\t\t\tthrow Error(error)\n\t\t}\n\t}\n\n\tprivate _handleOpen = (event: Event) => {\n\t\tthis._debug('open event')\n\t\tconst { minUptime } = this._options\n\n\t\tclearTimeout(this._connectTimeout)\n\t\tthis._uptimeTimeout = setTimeout(() => this._acceptOpen(), minUptime)\n\n\t\tif (this._ws) {\n\t\t\tthis._ws.binaryType = this._binaryType\n\t\t}\n\n\t\tthis._options.enableHeartbeat && this._heartCheck()\n\n\t\tthis._messageQueue.forEach(message => this._ws?.send(message))\n\t\tthis._messageQueue = []\n\n\t\tif (this.onopen) {\n\t\t\tthis.onopen(event)\n\t\t}\n\t\tthis._listeners.open.forEach(listener => this._callEventListener(event, listener))\n\t}\n\tprivate _handleMessage = (event: MessageEvent) => {\n\t\tthis._debug('message event')\n\t\tif (event.data === this._options.pingMsg || event.data === '') {\n\t\t\tclearTimeout(this._pongTimeoutId)\n\t\t\tthis._debug('pong')\n\t\t}\n\t\tif (this.onmessage) {\n\t\t\tthis.onmessage(event)\n\t\t}\n\t\tthis._listeners.message.forEach(listener => this._callEventListener(event, listener))\n\t}\n\tprivate _handleClose = (event: CloseEvent) => {\n\t\tthis._debug('close event')\n\t\tthis._clearTimeouts()\n\t\tif (this._shouldReconnect) {\n\t\t\tthis._connect()\n\t\t}\n\t\tif (this.onclose) {\n\t\t\tthis.onclose(event)\n\t\t}\n\t\tthis._listeners.close.forEach(listener => this._callEventListener(event, listener))\n\t}\n\tprivate _handleError = (event: ErrorEvent) => {\n\t\tthis._debug('error event', event.message)\n\t\tthis._disconnect(undefined, event.message === 'TIMEOUT' ? 'timeout' : undefined)\n\n\t\tif (this.onerror) {\n\t\t\tthis.onerror(event)\n\t\t}\n\t\tthis._debug('exec error listeners')\n\t\tthis._listeners.error.forEach(listener => this._callEventListener(event, listener))\n\n\t\tthis._connect()\n\t}\n\tprivate _handleReconnect = () => {\n\t\tif (this._connectLock || !this._shouldReconnect) {\n\t\t\treturn\n\t\t}\n\t\tthis._debug('reconnect event')\n\t\tconst {\tmaxRetries } = this._options\n\n\t\tif (this.onreconnect) {\n\t\t\tthis.onreconnect({\n\t\t\t\tmaxRetries,\n\t\t\t\tretryCount: this._retryCount\n\t\t\t})\n\t\t}\n\t\tthis._listeners.reconnect.forEach(listener => this._callEventListener({\n\t\t\tmaxRetries,\n\t\t\tretryCount: this._retryCount\n\t\t}, listener))\n\t}\n\n\tprivate _wait (): Promise<void> {\n\t\treturn new Promise(resolve => {\n\t\t\tsetTimeout(resolve, this._getNextDelay())\n\t\t})\n\t}\n\n\tprivate _getNextDelay (): number {\n\t\tconst {\n\t\t\treconnectionDelayGrowFactor,\n\t\t\tminReconnectionDelay,\n\t\t\tmaxReconnectionDelay\n\t\t} = this._options\n\t\tlet delay = 0\n\t\tif (this._retryCount > 0) {\n\t\t\tdelay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount)\n\t\t\tif (delay > maxReconnectionDelay) {\n\t\t\t\tdelay = maxReconnectionDelay\n\t\t\t}\n\t\t}\n\t\tdelay = Math.ceil(delay)\n\t\tthis._debug('next delay', delay)\n\t\treturn delay\n\t}\n\n\tprivate _getNextUrl (urlProvider: UrlProvider): Promise<string> {\n\t\tif (typeof urlProvider === 'string') {\n\t\t\treturn Promise.resolve(urlProvider)\n\t\t} else if (typeof urlProvider === 'function') {\n\t\t\tconst url = urlProvider()\n\t\t\tif (typeof url === 'string') {\n\t\t\t\treturn Promise.resolve(url)\n\t\t\t}\n\t\t\tif (url.then !== undefined) {\n\t\t\t\treturn url\n\t\t\t}\n\t\t}\n\t\tthrow Error('Invalid URL')\n\t}\n\n\tprivate _handleTimeout () {\n\t\tthis._debug('timeout event')\n\t\tthis._handleError(new ErrorEvent(Error('TIMEOUT'), this))\n\t}\n\n\tprivate _acceptOpen () {\n\t\tthis._debug('accept open')\n\t\tthis._retryCount = 0\n\t}\n\n\tprivate _debug (...args: any[]) {\n\t\tif (this._options.debug) {\n\t\t\tconsole.log('[WSR]', ...args)\n\t\t}\n\t}\n\n\tprivate _addEventListeners () {\n\t\tif (!this._ws) {\n\t\t\treturn\n\t\t}\n\t\tthis._debug('addListeners')\n\t\tthis._ws.addEventListener('open', this._handleOpen)\n\t\tthis._ws.addEventListener('message', this._handleMessage)\n\t\tthis._ws.addEventListener('close', this._handleClose)\n\t\t// @ts-ignore\n\t\tthis._ws.addEventListener('error', this._handleError)\n\t}\n\tprivate _removeListeners () {\n\t\tif (!this._ws) {\n\t\t\treturn\n\t\t}\n\t\tthis._debug('removeListeners')\n\t\tthis._ws.removeEventListener('open', this._handleOpen)\n\t\tthis._ws.removeEventListener('message', this._handleMessage)\n\t\tthis._ws.removeEventListener('close', this._handleClose)\n\t\t// @ts-ignore\n\t\tthis._ws.removeEventListener('error', this._handleError)\n\t}\n\n\tprivate _heartCheck () {\n\t\tthis._heartReset()\n\t\tthis._heartStart()\n\t}\n\n\tprivate _heartStart () {\n\t\tconst { enableHeartbeat, pingTimeout, pongTimeout, pingMsg } = this._options\n\t\tif (!this._shouldReconnect && !enableHeartbeat) {\n\t\t\treturn\n\t\t}\n\t\tthis._pingIntervalId = setInterval(() => {\n\t\t\tthis._debug('ping')\n\t\t\tthis.send(pingMsg)\n\t\t\tthis._pongTimeoutId = setTimeout(() => {\n\t\t\t\tthis._debug('Pong Timeout')\n\t\t\t\tthis.reconnect()\n\t\t\t}, pongTimeout)\n\t\t}, pingTimeout)\n\t}\n\n\tprivate _heartReset () {\n\t\tclearInterval(this._pingIntervalId)\n\t\tclearTimeout(this._pongTimeoutId)\n\t}\n\n\tprivate _clearTimeouts (): void {\n\t\tclearTimeout(this._connectTimeout)\n\t\tclearTimeout(this._uptimeTimeout)\n\t\tthis._heartReset()\n\t}\n}\n"],"names":["type","target","error","_super","_this","message","__extends","Event","code","reason","getGlobalWebSocket","WebSocket","url","protocols","options","open","close","reconnect","event","_debug","minUptime","_options","clearTimeout","_connectTimeout","_uptimeTimeout","setTimeout","_acceptOpen","_ws","binaryType","_binaryType","enableHeartbeat","_heartCheck","_messageQueue","forEach","send","onopen","_listeners","listener","_callEventListener","data","pingMsg","_pongTimeoutId","onmessage","_clearTimeouts","_shouldReconnect","_connect","onclose","_disconnect","undefined","onerror","_connectLock","maxRetries","onreconnect","retryCount","_retryCount","_url","_protocols","maxReconnectionDelay","minReconnectionDelay","Math","random","reconnectionDelayGrowFactor","connectionTimeout","Infinity","maxEnqueuedMessages","startClosed","pingTimeout","pongTimeout","debug","this","Object","WebsocketReconnect","value","max","reduce","acc","length","Blob","size","byteLength","bufferedAmount","extensions","protocol","readyState","CLOSED","CLOSING","CONNECTING","OPEN","_closeCalled","push","filter","l","listeners","listeners_1","__values","handleEvent","_handleReconnect","_a","_removeListeners","w","Error","_wait","then","_getNextUrl","_addEventListeners","_handleTimeout","_handleClose","CloseEvent","Promise","resolve","_getNextDelay","delay","pow","ceil","urlProvider","_handleError","ErrorEvent","_i","args","console","log","addEventListener","_handleOpen","_handleMessage","removeEventListener","_heartReset","_heartStart","_pingIntervalId","setInterval","clearInterval"],"mappings":"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"}